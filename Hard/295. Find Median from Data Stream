// Daily Challenge


class MedianFinder {
    private PriorityQueue<Integer> minHeap; 
    private PriorityQueue<Integer> maxHeap;
    public MedianFinder() {
        minHeap = new PriorityQueue<>(); 
        maxHeap = new PriorityQueue<>(Collections.reverseOrder());
    }
    
    public void addNum(int num) {
        if(minHeap.size()==maxHeap.size())
        {
            minHeap.add(num);
            maxHeap.add(minHeap.poll());
        }
        else
        {
            maxHeap.add(num);
            minHeap.add(maxHeap.poll());
        }
    }
    
    public double findMedian() {
        double result;
        if(minHeap.size()<maxHeap.size())
        {
            result=maxHeap.peek();
        }
        else
        {
            result=(minHeap.peek()+maxHeap.peek())/2.0;
        }
        return result;
    }
}
