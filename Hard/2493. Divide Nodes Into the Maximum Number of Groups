
//Learned in GPT

import java.util.*;

class Solution {
    public int magnificentSets(int n, int[][] edges) {
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i <= n; i++) {
            graph.add(new ArrayList<>());
        }
        for (int[] edge : edges) {
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }

        int[] color = new int[n + 1];
        Arrays.fill(color, -1);

        List<List<Integer>> components = new ArrayList<>();

        for (int i = 1; i <= n; i++) {
            if (color[i] == -1) {
                List<Integer> component = new ArrayList<>();
                if (!isBipartite(i, graph, color, component)) {
                    return -1;
                }
                components.add(component);
            }
        }

        int maxGroups = 0;
        for (List<Integer> component : components) {
            maxGroups += bfsMaxDepth(component, graph);
        }
        return maxGroups;
    }

    private boolean isBipartite(int node, List<List<Integer>> graph, int[] color, List<Integer> component) {
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(node);
        color[node] = 0;
        component.add(node);

        while (!queue.isEmpty()) {
            int cur = queue.poll();
            for (int neighbor : graph.get(cur)) {
                if (color[neighbor] == -1) {
                    color[neighbor] = 1 - color[cur];
                    queue.offer(neighbor);
                    component.add(neighbor);
                } else if (color[neighbor] == color[cur]) {
                    return false;
                }
            }
        }
        return true;
    }

    private int bfsMaxDepth(List<Integer> component, List<List<Integer>> graph) {
        int maxDepth = 0;
        for (int node : component) {
            maxDepth = Math.max(maxDepth, bfs(node, graph));
        }
        return maxDepth;
    }

    private int bfs(int start, List<List<Integer>> graph) {
        Queue<Integer> queue = new LinkedList<>();
        Map<Integer, Integer> depth = new HashMap<>();
        queue.offer(start);
        depth.put(start, 1);
        int maxDepth = 1;

        while (!queue.isEmpty()) {
            int cur = queue.poll();
            for (int neighbor : graph.get(cur)) {
                if (!depth.containsKey(neighbor)) {
                    depth.put(neighbor, depth.get(cur) + 1);
                    queue.offer(neighbor);
                    maxDepth = Math.max(maxDepth, depth.get(neighbor));
                }
            }
        }
        return maxDepth;
    }
}
